{"version":3,"sources":["logo.svg","Polar.js","Line.js","Pie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Polar","Component","option","angleAxis","radiusAxis","type","data","z","polar","series","coordinateSystem","name","stack","legend","show","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,6KC4C5BC,GC1CIC,YCADA,YFAP,kHAwCR,OAxCQ,mCACT,WACE,OACE,kBAAC,IAAY,CACXC,OAAQ,CACZC,UAAW,GAEXC,WAAY,CACRC,KAAM,WACNC,KAAM,CAAC,MAAO,OAAQ,MAAO,SAC7BC,EAAG,IAEPC,MAAO,GAEPC,OAAQ,CAAC,CACLJ,KAAM,MACNC,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBI,iBAAkB,QAClBC,KAAM,IACNC,MAAO,KACR,CACCP,KAAM,MACNC,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBI,iBAAkB,QAClBC,KAAM,IACNC,MAAO,KACR,CACCP,KAAM,MACNC,KAAM,CAAC,EAAG,EAAG,EAAG,GAChBI,iBAAkB,QAClBC,KAAM,IACNC,MAAO,MAEXC,OAAQ,CACJC,MAAM,EACNR,KAAM,CAAC,IAAK,IAAK,aAKtB,EAxCQ,CAASL,cGcLc,MATf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAK,QCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0423e90c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nclass Polar extends Component {\n  render() {\n    return (\n      <ReactEcharts\n        option={{\n    angleAxis: {\n    },\n    radiusAxis: {\n        type: 'category',\n        data: ['Mon', 'Tues', 'Wed', 'Thurs'],\n        z: 10\n    },\n    polar: {\n    },\n    series: [{\n        type: 'bar',\n        data: [1, 2, 3, 4],\n        coordinateSystem: 'polar',\n        name: 'A',\n        stack: 'a'\n    }, {\n        type: 'bar',\n        data: [2, 4, 6, 8],\n        coordinateSystem: 'polar',\n        name: 'B',\n        stack: 'a'\n    }, {\n        type: 'bar',\n        data: [1, 2, 3, 4],\n        coordinateSystem: 'polar',\n        name: 'C',\n        stack: 'a'\n    }],\n    legend: {\n        show: true,\n        data: ['A', 'B', 'C']\n    }\n}}\n      />\n    );\n  }\n}\nexport default Polar;","import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nclass Line extends Component {\n  render() {\n    return (\n      <ReactEcharts\n        option={{\n          xAxis: {\n            type: 'category',\n            data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [{ \n            data: [820, 932, 901, 934, 1290, 1330, 1320],\n            type: 'line'\n          }]\n        }}\n      />\n    );\n  }\n}\nexport default Line;","import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nclass Pie extends Component {\n  render() {\n    return (\n      <ReactEcharts\n        option={{\n    tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b}: {c} ({d}%)'\n    },\n    legend: {\n        orient: 'vertical',\n        left: 10,\n        data: ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri']\n    },\n    series: [\n        {\n            name: 'Utilization',\n            type: 'pie',\n            radius: ['50%', '70%'],\n            avoidLabelOverlap: false,\n            label: {\n                show: false,\n                position: 'center'\n            },\n            emphasis: {\n                label: {\n                    show: true,\n                    fontSize: '30',\n                    fontWeight: 'bold'\n                }\n            },\n            labelLine: {\n                show: false\n            },\n            data: [\n                {value: 335, name: 'Mon'},\n                {value: 310, name: 'Tues'},\n                {value: 234, name: 'Wed'},\n                {value: 135, name: 'Thurs'},\n                {value: 1548, name: 'Fri'}\n            ]\n        }\n    ]\n}}\n      />\n    );\n  }\n}\nexport default Pie;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Line from './Line';\nimport Pie from './Pie';\nimport Polar from './Polar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Polar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}